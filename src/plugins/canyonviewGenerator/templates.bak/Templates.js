/* Generated file based on ejs templates */
define([], function () {
    'use strict';
    return {
    "c++.generated.cpp.ejs": "// Generated from:\n//\n//\n<%\nvar i, j,\n        outerIf = 'if',\n        innerIf = 'if',\n        initialStateName;\n\nfor (i = 0; i < pathModel.motion.length; i += 1) {\n}\n\n%>\n#include <iostream>\n#include <string>\n#include <set>\n\n\nint main(int argc, char** argv)\n{\n    std::cout << \"State machine for <%=pathModel.name%>. Type 'exit' to exit the program any time.\" << std::endl;\n\n<%for (i = 0; i < pathModel.motion.length; i += 1) {%>    std::cout << \"Motion: <%=pathModel.motion[i].name%>\" << std::end;\n<%}%>\n\n    return 0;\n}",
    "matlab.generated.m.ejs": "// Generated from:\n//\n//\n<%\nvar i, j,\n        outerIf = 'if',\n        innerIf = 'if',\n        initialStateName;\n\nfor (i = 0; i < pathModel.motion.length; i += 1) {\n}\n\n%>\n#include <iostream>\n#include <string>\n#include <set>\n\n\nint main(int argc, char** argv)\n{\n    std::cout << \"State machine for <%=pathModel.name%>. Type 'exit' to exit the program any time.\" << std::endl;\n\n<%for (i = 0; i < pathModel.motion.length; i += 1) {%>    std::cout << \"Motion: <%=pathModel.motion[i].name%>\" << std::end;\n<%}%>\n\n    return 0;\n}",
    "path.generated.txt.ejs": "<%\nmotion = {};\nhaveMotion = false;\nfor (i = 0; i < pathModel.motion.length; i += 1) {\n\tif(pathModel.motion[i].isStart) {\n\t\tmotion = pathModel.motion[i];\n\t\thaveMotion = true;\n\t\tbreak;\n\t}\n}\n\nwhile(haveMotion) {\n//console.log('Have a motion: ' + JSON.stringify(motion, null, 4));\n//console.log(' - PrimitiveMotionConnections: ' + JSON.stringify(motion.PrimitiveMotionConnections, null, 4));\n%><%=motion.Type%> <%=motion.RadOfCurvature%> <%=motion.velocity%> <%=motion.Distance%> <%=motion.FinalTurnAngle%>\n<%\nhaveMotion = false;\nif( motion.PrimitiveMotionConnections.length != 0) {\n//\tconsole.log('There exists an outgoing connection');\n\tfor (i = 0; i < pathModel.motion.length; i += 1) {\n\t\tif(pathModel.motion[i].id === motion.PrimitiveMotionConnections[0].targetId) {\n\t\t\thaveMotion = true;\n\t\t\tmotion = pathModel.motion[i];\n\t\t\tbreak;\n\t\t}\n\t}\n}\n}%>"
}});