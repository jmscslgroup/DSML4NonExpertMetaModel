/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Tue Jun 18 2019 13:06:06 GMT-0700 (Mountain Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of CanyonViewGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CanyonViewGenerator.
     * @constructor
     */
    function CanyonViewGenerator() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    CanyonViewGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    CanyonViewGenerator.prototype = Object.create(PluginBase.prototype);
    CanyonViewGenerator.prototype.constructor = CanyonViewGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    CanyonViewGenerator.prototype.main = function (callback) {
        // Call the promise that loads all of the nodes within the
        // model view

        this.loadNodeMap(this.activeNode)
            .then( (nodes) => {
                // Ensure there is at least 1 node
                // TODO: Minimum number of nodes?
                if (nodes.size < 1) {
                    this.logger.warn("0 nodes in the model, exiting");
                    callback(null, self.result);
                }

                // Collect all of the block nodes into a list
                let blocks = this.getAllBlockNodes(nodes);


                this.result.setSuccess(true);
                callback(null, self.result);
        });

    };

    /**
     * Gather up all of the block nodes
     * @param nodes Node Map
     * @returns {Array} Array of JSON objects representing the blocks
     */
    CanyonViewGenerator.prototype.getAllBlockNodes = function(nodes) {
        // Define the array to hold all of the JSON objects
        let blocks = [];

        // Iterate through each node in the list
        for ( let node in nodes ) {
            // Collect the current nodes object
            let currentNode = nodes[node];

            // Check which meta type the node is and then get the information from it
            if ( this.isMetaTypeOf(currentNode, this.META.Abstract_Motion )) {
                blocks.push(this.getAbstractMotionBlock(currentNode));
            }
        }

        return blocks;
    };


    CanyonViewGenerator.prototype.getAbstractMotionBlock = function(abstractMotionBlock) {
        // This is a kluge and I don't like it but it seems like the only quick way to
        // get the meta type of the current node
        let nodeType = this.core.getAttribute(abstractMotionBlock, "name");
    };

    return CanyonViewGenerator;
});
