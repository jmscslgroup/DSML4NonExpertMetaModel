/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Tue Jun 18 2019 13:06:06 GMT-0700 (Mountain Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    "ejs",
    "./templates/Templates"
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    ejs,
    Templates) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of CanyonViewGenerator.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CanyonViewGenerator.
     * @constructor
     */
    function CanyonViewGenerator() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    CanyonViewGenerator.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    CanyonViewGenerator.prototype = Object.create(PluginBase.prototype);
    CanyonViewGenerator.prototype.constructor = CanyonViewGenerator;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    CanyonViewGenerator.prototype.main = function (callback) {
        // Call the promise that loads all of the nodes within the
        // model view. All business logic is done within the .then{}
        this.loadNodeMap(this.activeNode)
            .then( async (nodes) => {
                // Ensure there is at least 1 node
                // TODO: Minimum number of nodes?
                if (nodes.size < 1) {
                    this.logger.warn("0 nodes in the model, exiting");
                    callback(null, self.result);
                }

                // Collect all of the block nodes into a list
                let blocks = this.getAllBlockNodes(nodes);
                console.log(blocks);

                // Get all of the connections between blocks
                this.getBlockConnections(blocks, nodes);

                let renderedSimple = await ejs.render(Templates["simplePath.path.ejs"], {blocks: blocks});
                console.log(renderedSimple);

                let renderedCar = await ejs.render(Templates["carsim.ejs"], {blocks: blocks});
                console.log(renderedCar);

                return this.blobClient.putFile(this.core.getAttribute(this.activeNode, "name") + ".dmsl4kidz", JSON.stringify(blocks));

            })
            .then((metadataHash) => {
                // Here the file has been added to the blob

                this.result.addArtifact(metadataHash)
                this.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch((err) => {
                // Result success is false at invocation.
                this.logger.error(err.stack);
                callback(err, self.result);
            });

    };

    CanyonViewGenerator.prototype.getBlockConnections = function(blocks, nodes) {
      // Iterate through each node in the list
      for ( let node in nodes ) {
          // Collect the current node
          let currentNode = nodes[node];

          // Ensure that it is of type connection
          if (!this.isMetaTypeOf(currentNode, this.META.Connection)) {
              continue;
          }

          // Get the dest and src of the pointer node. These will point to the
          // "pins" on the actual block node
          let srcPath = this.core.getPointerPath(currentNode, "src");
          let dstPath = this.core.getPointerPath(currentNode, "dst");

          // Get the actual src and dst nodes
          let srcNode = nodes[srcPath];
          let dstNode = nodes[dstPath];

          // The type of the connection the connection is to each node is dependent
          // on the name of the "port" that the connection is connected to. For example,
          // on a 'for' block the connection named 'code to run' means the code block to run
          // x number of times. Where x is an attribute of the for block
          let srcConnectionType = this.core.getAttribute(srcNode, "name");
          let dstConnectionType = this.core.getAttribute(dstNode, "name");

          // Get the actual node parents of the port nodes. These are the actual nodes
          // that do the logic of the program (left, right, honk, etc.)
          let srcParent = this.core.getParent(srcNode);
          let dstParent = this.core.getParent(dstNode);

          // The paths are what is used to index the nodes connections in the
          // blocks dict
          let srcParentPath = this.core.getPath(srcParent);
          let dstParentPath = this.core.getPath(dstParent);

          // Set the connections
          blocks[srcParentPath].connections[srcConnectionType] = dstParentPath;
          blocks[dstParentPath].connections[dstConnectionType] = srcParentPath;
      }
    };

    /**
     * Gather up all of the block nodes
     * @param nodes Node Map
     * @returns {Array} Array of JSON objects representing the blocks
     */
    CanyonViewGenerator.prototype.getAllBlockNodes = function(nodes) {
        // Define the dictionary: key -> path; value -> JSON objects
        let blocks = {};

        // Iterate through each node in the list
        for ( let node in nodes ) {
            // Collect the current nodes object
            let currentNode = nodes[node];

            // Check which meta type the node is and then get the information from it
            if ( this.isMetaTypeOf(currentNode, this.META.Abstract_Motion) ) {
                blocks[node] = this.getAbstractMotionBlock(currentNode);
            }

            else if ( this.isMetaTypeOf(currentNode, this.META.Abstract_Sensor) ) {
                blocks[node] = this.getAbstractSensorBlock(currentNode);
            }

            else if ( this.isMetaTypeOf(currentNode, this.META.Abstract_Action) ) {
                blocks[node] = this.getAbstractActionBlock(currentNode);
            }

            else if ( this.isMetaTypeOf(currentNode, this.META.Abstract_Control) ) {
                blocks[node] = this.getAbstractControlBlock(currentNode);
            }
        }

        // Return the block list
        return blocks;
    };

    /**
     * Get information from a node that inherits from abstract control block and return
     * the JSON object
     * @param abstractControlBlock Block that inherits from abstract control
     * @returns {{type: string, connections: {}}}
     */
    CanyonViewGenerator.prototype.getAbstractControlBlock = function(abstractControlBlock) {
        let abstractControlBlockModel = {
            type: "",
            connections: {},
            attributes: {}
        };

        // This is a kludge and I don't like it but it seems like the only quick way to
        // get the meta type of the current node
        let nodeType = this.core.getAttribute(abstractControlBlock, "name");

        // Collect for block times if applicable
        if( nodeType === "For" ) {
            abstractControlBlockModel.attributes["times"] = this.core.getAttribute(abstractControlBlock, "times");
        }

        // Stuff the model
        abstractControlBlockModel.type = nodeType;
        return abstractControlBlockModel;
    };

    /**
     * Get information from a node that inherits from abstract action block and return
     * the JSON object
     * @param abstractActionBlock Block that inherits from abstract action
     * @returns {{type: string, connections: {}}}
     */
    CanyonViewGenerator.prototype.getAbstractActionBlock = function(abstractActionBlock) {
        // Define a JSON object to store the action model
        let abstractSensorBlockModel = {
            type: "",
            connections: {}
        };

        // This is a kludge and I don't like it but it seems like the only quick way to
        // get the meta type of the current node
        let nodeType = this.core.getAttribute(abstractActionBlock, "name");

        // Stuff the model
        abstractSensorBlockModel.type = nodeType;
        return abstractSensorBlockModel;
    };

    /**
     * Get information from a node that inherits from abstract sensor block and return
     * the JSON object
     * @param abstractSensorBlock Block that inherits from abstract sensor
     * @returns {{type: string, connections: {}}}
     */
    CanyonViewGenerator.prototype.getAbstractSensorBlock = function(abstractSensorBlock) {
        // Define a JSON object to store the sensor model
        let abstractSensorBlockModel = {
            type: "",
            connections: {}
        };

        // This is a kludge and I don't like it but it seems like the only quick way to
        // get the meta type of the current node
        let nodeType = this.core.getAttribute(abstractSensorBlock, "name");

        // Stuff the model
        abstractSensorBlockModel.type = nodeType;
        return abstractSensorBlockModel;
    };

    /**
     * Get information from a node that inherits from abstract motion block and return
     * the JSON object
     * @param abstractMotionBlock Block that inherits from abstract motion
     * @returns {{attributes: {}, type: string, connections: {}}}
     */
    CanyonViewGenerator.prototype.getAbstractMotionBlock = function(abstractMotionBlock) {
        // Define a JSON object to store the motion model
        let abstractMotionBlockModel = {
            type: "",
            connections: {},
            attributes: {}
        };

        // This is a kluge and I don't like it but it seems like the only quick way to
        // get the meta type of the current node
        let nodeType = this.core.getAttribute(abstractMotionBlock, "name");

        // Get the velocity
        let velocity = this.core.getAttribute(abstractMotionBlock, "Velocity");

        // Stuff the model
        abstractMotionBlockModel.type = nodeType;
        abstractMotionBlockModel.attributes["velocity"] = velocity;
        return abstractMotionBlockModel;
    };

    return CanyonViewGenerator;
});
